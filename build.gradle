plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"

}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    apply plugin: 'me.modmuss50.mod-publish-plugin'

    def modLoader = project.name
    boolean isCommon = modLoader == "common"

    base {
        archivesName = "${rootProject.archives_name}-${rootProject.minecraft_version}-${project.name}"

    }

    repositories {
        maven {
            url = 'https://maven.blamejared.com'
        }
        maven {
            name = "Terraformers"
            url = "https://maven.terraformersmc.com/"
        }

    }


    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"

        modImplementation "mysticdrew:common-networking-$modLoader:1.0.18-1.21.1"

        if(!isCommon) {
            // Add the common project as a dependency for all platforms except common and loom.
            include "mysticdrew:common-networking-$modLoader:1.0.18-1.21.1"
        }

        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    if (!isCommon) {
        publishMods {
            file = file("../${modLoader.capitalize()}/build/libs/ExoConfig-${minecraft_version}-${modLoader}-${mod_version}.jar")
            changelog = file("../changelog.md").getText('UTF-8')
            type = STABLE
            modLoaders.add(modLoader)
            displayName = "[${modLoader.capitalize()} ${minecraft_version}] ExoConfig ${mod_version}"

            curseforge {
                projectId = "0000000" // Required for curseforge
                projectSlug = "exoconfig" // Required for discord webhook
                accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
                minecraftVersions.add("${minecraft_version}")
                javaVersions.add(JavaVersion.VERSION_21)
                embeds("common-network")
            }

            modrinth {
                projectId = "QsXGZyhd"
                accessToken = providers.environmentVariable("MODRINTH_TOKEN")
                minecraftVersions.add("${minecraft_version}")
                embeds("common-network")

            }
        }
    }
}
